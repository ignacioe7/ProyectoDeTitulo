# APLICACI칍N PRINCIPAL DE STREAMLIT PARA AN츼LISIS DE SENTIMIENTOS TRIPADVISOR
# Archivo principal que configura la interfaz web y maneja la navegaci칩n entre m칩dulos
# Implementa sistema de bloqueo de navegaci칩n durante procesos activos

import sys
import os
import streamlit as st

# configuraci칩n del path para importaciones relativas
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))

from src.utils import setup_logging  # config del logger
setup_logging()  # inicializar logging

from streamlit_option_menu import option_menu  # menu de navegaci칩n
from src.ui.menu import analyzer, attractions, filters, home, results, reviews  # m칩dulos de las p치ginas
from loguru import logger as log 
from src.core.data_handler import DataHandler  # gestor de datos principal

# configuraci칩n inicial de la p치gina web con layout amplio y sidebar expandido
st.set_page_config(
  page_title="An치lisis de Sentimientos TripAdvisor",
  page_icon="游늵",
  layout="wide",
  initial_sidebar_state="expanded"
)

# ====================================================================================================================
#                                             OBTENER GESTOR DE DATOS
# ====================================================================================================================

@st.cache_resource  # cachear para tener una 칰nica instancia
def get_data_handler():
  # OBTIENE INSTANCIA 칔NICA DE DATAHANDLER CON MANEJO DE ERRORES
  # Carga el gestor principal de datos con cache para evitar m칰ltiples instancias
  # Retorna handler v치lido o None en caso de error cr칤tico
  try:
    handler = DataHandler()
    log.info("DataHandler cargado exitosamente")
    return handler
  except Exception as e:
    log.error(f"Error cr칤tico al cargar DataHandler: {e}")
    st.error(f"Error cr칤tico DataHandler: {e}")
    return None

# ====================================================================================================================
#                                         OBTENER INFORMACI칍N DE PROCESOS ACTIVOS
# ====================================================================================================================

def get_active_process_info():
  # DETERMINA QU칄 PROCESO EST츼 ACTUALMENTE EN EJECUCI칍N
  # Verifica estados de session para identificar procesos activos de scraping o an치lisis
  # Retorna tipo de proceso, nombre descriptivo y 칤ndice del men칰 correspondiente
  scraping_active = st.session_state.get('scraping_active', False)
  attractions_scraping_active = st.session_state.get('attractions_scraping_active', False)
  analysis_active = st.session_state.get('analysis_active', False)
  
  # mapeo de estados a informaci칩n de proceso
  if scraping_active:
    return "scraping_reviews", "Scraping de Rese침as", 2
  elif attractions_scraping_active:
    return "scraping_attractions", "Scraping de Atracciones", 1
  elif analysis_active:
    return "analysis", "An치lisis de Sentimientos", 3
  else:
    return None, None, 0

# ====================================================================================================================
#                                            INYECTAR ESTILOS CSS DE BLOQUEO
# ====================================================================================================================

def inject_blocking_css():
  # INYECTA ESTILOS CSS PARA BLOQUEAR NAVEGACI칍N DURANTE PROCESOS ACTIVOS
  # Aplica estilos que deshabilitan elementos del men칰 excepto el activo
  # Utiliza pointer-events y overlay visual para prevenir interacci칩n del usuario
  st.markdown("""
  <style>
  /* Bloquear todos los elementos del men칰 excepto el activo */
  .blocked-menu .nav-link:not(.active) {
    pointer-events: none !important;
    opacity: 0.8 !important;
    cursor: not-allowed !important;
    background-color: #dc2d22 !important;
    color: #999 !important;
  }
  
  /* Mantener el elemento activo normal */
  .blocked-menu .nav-link.active {
    pointer-events: auto !important;
    opacity: 1 !important;
    cursor: pointer !important;
  }
  
  /* Overlay invisible para capturar clicks */
  .blocked-menu::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 10;
    pointer-events: none;
  }
  
  /* Bloquear interacci칩n con elementos espec칤ficos */
  .blocked-menu .nav-link:not(.active) * {
    pointer-events: none !important;
  }
  </style>
  """, unsafe_allow_html=True)

# ====================================================================================================================
#                                            MOSTRAR ADVERTENCIAS ANTI-BOT
# ====================================================================================================================

def show_anti_bot_warning():
  # MUESTRA ADVERTENCIAS SOBRE SISTEMAS ANTI-BOT DE TRIPADVISOR
  # Informa sobre detecci칩n automatizada y mejores pr치cticas para evitar bloqueos
  # Recomienda configuraciones de concurrencia seguras para scraping
  st.sidebar.markdown("---")
  st.sidebar.warning(
    "Importante: Si el scraping se completa muy r치pido "
    "(menos de 30 segundos), es posible que TripAdvisor haya detectado "
    "actividad automatizada y est칠 bloqueando las peticiones."
  )
  st.sidebar.info(
    "Recomendaci칩n: Usa configuraciones de concurrencia bajas "
    "(1-2) y evita hacer scraping frecuente en per칤odos cortos."
  )

# ====================================================================================================================
#                                           INICIALIZACI칍N PRINCIPAL
# ====================================================================================================================

# obtener instancia 칰nica de DataHandler con manejo de errores
data_handler = get_data_handler()

# verificaci칩n cr칤tica de disponibilidad del gestor de datos
if data_handler is None:
  st.sidebar.error("Error: DataHandler no disponible")
  st.stop()

# inicializaci칩n de estados de sesi칩n para control de procesos activos
if 'scraping_active' not in st.session_state:
  st.session_state.scraping_active = False
if 'attractions_scraping_active' not in st.session_state:
  st.session_state.attractions_scraping_active = False
if 'analysis_active' not in st.session_state:
  st.session_state.analysis_active = False

# obtenci칩n de informaci칩n sobre procesos activos actuales
process_type, process_name, active_index = get_active_process_info()
any_process_active = process_type is not None

# aplicaci칩n de estilos CSS de bloqueo si hay procesos activos
inject_blocking_css()

# ====================================================================================================================
#                                       CONSTRUCCI칍N DEL MEN칔 LATERAL
# ====================================================================================================================

# CONSTRUCCI칍N DEL MEN칔 LATERAL CON SISTEMA DE BLOQUEO
with st.sidebar:
  # mostrar indicadores visuales de estado activo
  if any_process_active:
    st.error(f"**{process_name.upper()} ACTIVO**")
    st.warning("Navegaci칩n bloqueada")
    st.markdown("---")
  
  # aplicar clases CSS de bloqueo condicionalmente
  menu_class = "blocked-menu" if any_process_active else ""
  
  if any_process_active:
    st.markdown(f'<div class="{menu_class}">', unsafe_allow_html=True)
  
  # generar key din치mica para mantener estado del men칰
  menu_key = f"menu_{process_type}_{active_index}" if any_process_active else "menu_normal"
  
  # construir men칰 principal con opciones y iconos
  selected = option_menu(
    menu_title="Men칰 Principal",
    options=[
      "Inicio", 
      "Scraping de Atracciones", 
      "Scraping de Rese침as", 
      "An치lisis de Sentimientos", 
      "Resultados y Visualizaci칩n",
      "Filtros y descargas"
    ],
    icons=["house", "geo-alt-fill", "card-list", "graph-up-arrow", "clipboard-data", "filter"],
    menu_icon="list-ul",
    default_index=active_index if any_process_active else 0,
    orientation="vertical",
    key=menu_key
  )
  
  # cerrar contenedor de bloqueo y mostrar info
  if any_process_active:
    st.markdown('</div>', unsafe_allow_html=True)
    st.info("Solo la p치gina activa es accesible")
  
  # mostrar advertencias espec칤ficas para p치ginas de scraping
  if selected in ["Scraping de Atracciones", "Scraping de Rese침as"]:
    show_anti_bot_warning()

# ====================================================================================================================
#                                      SISTEMA DE CONTROL DE NAVEGACI칍N
# ====================================================================================================================

# SISTEMA DE CONTROL DE NAVEGACI칍N FORZADA
if any_process_active:
  # mapeo de 칤ndices num칠ricos a nombres de p치ginas
  index_to_page = {
    0: "Inicio",
    1: "Scraping de Atracciones", 
    2: "Scraping de Rese침as",
    3: "An치lisis de Sentimientos",
    4: "Resultados y Visualizaci칩n",
    5: "Filtros y descargas"
  }
  
  # determinar p치gina permitida seg칰n proceso activo
  allowed_page = index_to_page[active_index]
  
  # forzar retorno a p치gina permitida si el usuario intenta cambiar
  if selected != allowed_page:
    st.error(f"**Acceso denegado durante {process_name.lower()}**")
    selected = allowed_page

# ====================================================================================================================
#                                     RENDERIZADO CONDICIONAL DE P츼GINAS
# ====================================================================================================================

# RENDERIZADO CONDICIONAL DE P츼GINAS CON CONTROL DE ACCESO
if selected == "Inicio":
  # renderizar p치gina de inicio con bloqueo durante procesos activos
  if any_process_active:
    st.error(f"**Inicio no disponible durante {process_name.lower()}**")
    st.info("Det칠n el proceso activo para acceder")
  else:
    home.render()

elif selected == "Scraping de Atracciones":
  # renderizar m칩dulo de scraping de atracciones con validaci칩n de estado
  if any_process_active and process_type != "scraping_attractions":
    st.error(f"**Scraping de Atracciones no disponible durante {process_name.lower()}**")
    st.info("Det칠n el proceso activo para acceder")
  elif data_handler:
    attractions.render(data_handler)
  else:
    st.error("DataHandler no disponible")

elif selected == "Scraping de Rese침as":
  # renderizar m칩dulo de scraping de rese침as con validaci칩n de estado
  if any_process_active and process_type != "scraping_reviews":
    st.error(f"**Scraping de Rese침as no disponible durante {process_name.lower()}**")
    st.info("Det칠n el proceso activo para acceder")
  elif data_handler:
    reviews.render(data_handler) 
  else:
    st.error("DataHandler no disponible")

elif selected == "An치lisis de Sentimientos":
  # renderizar m칩dulo de an치lisis con validaci칩n de estado
  if any_process_active and process_type != "analysis":
    st.error(f"**An치lisis no disponible durante {process_name.lower()}**")
    st.info("Det칠n el proceso activo para acceder")
  elif data_handler:
    analyzer.render(data_handler)
  else:
    st.error("DataHandler no disponible")

elif selected == "Resultados y Visualizaci칩n":
  # renderizar m칩dulo de resultados bloqueado durante procesos activos
  if any_process_active:
    st.error(f"**Resultados no disponibles durante {process_name.lower()}**")
    st.info("Det칠n el proceso activo para acceder")
  elif data_handler:
    results.render(data_handler)
  else:
    st.error("DataHandler no disponible")
  
elif selected == "Filtros y descargas":
  # renderizar m칩dulo de filtros bloqueado durante procesos activos
  if any_process_active:
    st.error(f"**Filtros y descargas no disponibles durante {process_name.lower()}**")
    st.info("Det칠n el proceso activo para acceder")
  elif data_handler:
    filters.render(data_handler)
  else:
    st.error("DataHandler no disponible")

# registro b치sico de navegaci칩n para depuraci칩n y monitoreo
log.debug(f"P치gina activa: {selected} | Proceso en ejecuci칩n: {process_name or 'ninguno'}")